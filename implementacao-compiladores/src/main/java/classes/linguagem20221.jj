options {
    STATIC = false;
    LOOKAHEAD = 1;
    DEBUG_LOOKAHEAD = true;
}

PARSER_BEGIN(Language20221)
package classes;
import org.javacc.parser.Token;
import org.javacc.parser.ParseException;

public class Language20221{
    private StringBuilder results = new StringBuilder();

    public void handleToken()  {
        try {
            Token t = null;
            t = getNextToken();
            if (t.kind == EOF) return;
            //System.out.println("KIND DO TOKEN LIDO: " + t.kind);
            if (t.kind == 14){           //PALAVRA_RESERVADA
                results.append("Token: '" + t.image + "' - Tipo: PALAVRA-RESERVADA  -  " + "ID: " +  t.kind + " - Line-Column: " + t.beginLine + "-" + t.beginColumn + "\n");
                System.out.println("Token: ['" + t.image + "'] - Tipo: ['PALAVRA-RESERVADA'] -  " + "Id: ['" +  t.kind + "'] - Linha: ['" + t.beginLine + "']  -  Coluna: ['" + t.beginColumn + "']\n");
            }else if (t.kind == 21){     //IDENTIFICADOR
                 results.append("Token: '" + t.image + "' - Tipo: ['IDENTIFICADORES']  -  " + "ID: " +  t.kind + " - Line-Column: " + t.beginLine + "-" + t.beginColumn + "\n");
                 System.out.println("Token: ['" + t.image + "'] - Tipo: ['IDENTIFICADORES']  -  " + "Id: ['" +  t.kind + "'] - Linha: ['" + t.beginLine + "']  -  Coluna: ['" + t.beginColumn + "']\n");
            }else if(t.kind == 22){      //CONSTANTE_LITERAL
                results.append("Token: '" + t.image + "' - Tipo: ['CONSTANTE_LITERAL']  -  " + "ID: " +  t.kind + " - Line-Column: " + t.beginLine + "-" + t.beginColumn + "\n");
                System.out.println("Token: ['" + t.image + "'] - Tipo: ['CONSTANTE_LITERAL']  -  " + "Id: ['" +  t.kind + "'] - Linha: ['" + t.beginLine + "']  -  Coluna: ['" + t.beginColumn + "']\n");
            }else if(t.kind == 23){      //CONSTANTE_NUMERICA_INTEIRA
                results.append("Token: '" + t.image + "' - Tipo: ['CONSTANTE_NUMERICA_INTEIRA']  -  " + "ID: " +  t.kind + " - Line-Column: " + t.beginLine + "-" + t.beginColumn + "\n");
                System.out.println("Token: ['" + t.image + "'] - Tipo: ['CONSTANTE_NUMERICA_INTEIRA']  -  " + "Id: ['" +  t.kind + "'] - Linha: ['" + t.beginLine + "']  -  Coluna: ['" + t.beginColumn + "']\n");
            }else if(t.kind == 25){      //CONSTANTE_NUMERICA_REAL
                results.append("Token: '" + t.image + "' - Tipo: ['CONSTANTE_NUMERICA_REAL']  -  " + "ID: " +  t.kind + " - Line-Column: " + t.beginLine + "-" + t.beginColumn + "\n");
                System.out.println("Token: ['" + t.image + "'] - Tipo: ['CONSTANTE_NUMERICA_REAL']  -  " + "Id: ['" +  t.kind + "'] - Linha: ['" + t.beginLine + "']  -  Coluna: ['" + t.beginColumn + "']\n");
            }else if(t.kind == 26){      //SIMBOLO ESPECIAIS
                results.append("Token: '" + t.image + "' - Tipo: ['SIMBOLO_ESPECIAL']  -  " + "ID: " +  t.kind + " - Line-Column: " + t.beginLine + "-" + t.beginColumn + "\n");
                System.out.println("Token: ['" + t.image + "'] - Tipo: ['SIMBOLO_ESPECIAL']  -  " + "Id: ['" +  t.kind + "'] - Linha: ['" + t.beginLine + "']  -  Coluna: ['" + t.beginColumn + "']\n");
            }else if(t.kind == 27){      //OPERADOR_ARITMETICO
                results.append("Token: '" + t.image + "' - Tipo: ['OPERADOR_ARITMETICO']  -  " + "ID: " +  t.kind + " - Line-Column: " + t.beginLine + "-" + t.beginColumn + "\n");
                System.out.println("Token: ['" + t.image + "'] - Tipo: ['OPERADOR_ARITMETICO']  -  " + "Id: ['" +  t.kind + "'] - Linha: ['" + t.beginLine + "']  -  Coluna: ['" + t.beginColumn + "']\n");
            }else if(t.kind == 28){
                results.append("Token: '" + t.image + "' - Tipo: ['OPERADOR_RELACIONAL']  -  " + "ID: " +  t.kind + " - Line-Column: " + t.beginLine + "-" + t.beginColumn + "\n");
                System.out.println("Token: ['" + t.image + "'] - Tipo: ['OPERADOR_RELACIONAL']  -  " + "Id: ['" +  t.kind + "'] - Linha: ['" + t.beginLine + "']  -  Coluna: ['" + t.beginColumn + "']\n");
            }else if(t.kind == 29){      //OPERADOR_LOGICO
                results.append("Token: '" + t.image + "' - Tipo: ['OPERADOR_LOGICO']  -  " + "ID: " +  t.kind + " - Line-Column: " + t.beginLine + "-" + t.beginColumn + "\n");
                System.out.println("Token: ['" + t.image + "'] - Tipo: ['OPERADOR_LOGICO']  -  " + "Id: ['" +  t.kind + "'] - Linha: ['" + t.beginLine + "']  -  Coluna: ['" + t.beginColumn + "']\n");
            }else{  //SIMBOLO_INVÁLIDO
                results.append("Token: '" + t.image + "' - Tipo: ['SIMBOLO_INVALIDO']  -  " + "ID: " +  t.kind + " - Line-Column: " + t.beginLine + "-" + t.beginColumn + "\n");
                System.out.println("Token: ['" + t.image + "'] - Tipo: ['SIMBOLO_INVALIDO']  -  " + "Id: ['" +  t.kind + "'] - Linha: ['" + t.beginLine + "']  -  Coluna: ['" + t.beginColumn + "']\n");
            }

            handleToken();
        }catch(Error error){
            results.append("Error - " + error.getMessage() + "\n");
            System.out.println(error.toString());
            handleToken();
        }
    }

    public String getTokens(String args[], String textToAnalyze) {
        Language20221 tokenizer;
        if(args.length == 0){
            System.out.println("Reading from received text!");
            java.io.InputStream targetStream = new java.io.ByteArrayInputStream(textToAnalyze.getBytes());
            tokenizer = new Language20221(targetStream);
        }else if(args.length == 1){
            try{
                tokenizer = new Language20221(new java.io.FileInputStream(args[0]));
            }catch(java.io.FileNotFoundException e){
                System.err.println(args[0] + " was not found." );
                System.err.println(e);
                return args[0] + " was not found.";
            }
        }else{
            System.out.println("Use:\njava Tokenizer < inputFile");
            System.out.println("or java Tokenizer inputFile");
            return "Use:java Tokenizer < inputFile";
        }
        this.handleToken();
        results.append("<EOF>");
        return results.toString();
    }

    public String getResults(){
        return results.toString();
    }
}

PARSER_END(Language20221)

SKIP :  //caracteres que o javacc excluirá da linguagem para nao interpretar
{
        " "
    |   "\t"
    |   "\n"
    |   "\r"
    |   "\f"
    |   "\r\n"
    |   "\n\r"
}

//COMENTÁRIO DE MULTIPLAS LINHAS
SKIP:
{
    "/*" : comentariodemultiplaslinhas
}
<comentariodemultiplaslinhas> SKIP:
{
        "*/" : DEFAULT
    |   <~[]>
}

//COMENTÁRIO DE LINHA
SKIP:
{
    "//": comentariodelinha
}
<comentariodelinha> SKIP:
{
        <["\n" , "\r"]> : DEFAULT
    |   <~[]>
}


//palavras reservadas
TOKEN :
{
    < PALAVRA_RESERVADA:
            "do"
        |   "this"
        |   "body"
        |   "description"
        |   "declaration"
        |   "type"
        |   "is"
        |   "constant"
        |   "and"
        |   "variable"
        |   "as"
        |   "integer"
        |   "real"
        |   "string"
        |   "logic"
        |   "designate"
        |   "read"
        |   "write"
        |   "all"
        |   "repeat"
        |   "true"
        |   "untrue" >
}

//Tokens Auxiliares
TOKEN : {
        < #LETRA: ["a"-"z","A"-"Z"] >
    |   < #ASCII : ~[] >      //any character
    |   < #DIGITO: ["0"-"9"] >
    |   < #UNDERLINE: "_" >
    |   < #ASPAS : "\"">
    |   < #APOSTROFO : "'" >
}

//Identificadores
TOKEN : {
    < IDENTIFICADORES: "a" >
}

//Constantes Literais
TOKEN : {
    < CONSTANTE_LITERAL : (<ASPAS> (<ASCII>)* <ASPAS>) | (<APOSTROFO> (<ASCII>)* <APOSTROFO>)  >
}

//Constantes Númericas (Real e Inteira)
TOKEN : {
        < CONSTANTE_NUMERICA_INTEIRA: <DIGITO> (<DIGITO>)? (<DIGITO>)? >                  // 1 a 3 digitos
    |   < CONSTANTE_NUMERICA_REAL_CASAS_DECIMAIS: <DIGITO> (<DIGITO>)? (<DIGITO>)? >      // 1 A 3 digitos
    |   < CONSTANTE_NUMERICA_REAL:   <CONSTANTE_NUMERICA_INTEIRA> (<DIGITO>)? (<DIGITO>)? "." <CONSTANTE_NUMERICA_REAL_CASAS_DECIMAIS> >
}

// < COMENTARIO_FACULTATIVO: ":-">         ///VERRRRRRRRRRRRRRRRRRRRR

//Símbolos Especiais
TOKEN :
{
    < SIMBOLO_ESPECIAL :
            "{"
        |   "}"
        |   "."
        |   ","
        |   "["
        |   "]"
        |   "("
        |   ")" >
}

//Operadores Aritméticos
TOKEN :
{
    < OPERADOR_ARITMETICO:
            "+"
        |   "-"
        |   "*"
        |   "/"
        |   "**"
        |   "%"
        |   "%%" >
}

//Operadores Relacionais
TOKEN :
{
    < OPERADOR_RELACIONAL :
            "="
        |   "!="
        |   "<"
        |   ">"
        |   "<="
        |   ">=" >
}

//Operadores Lógicos
TOKEN :
{
    < OPERADOR_LOGICO :
            "&"
        |   "|"
        |   "!"  >
}

//ERROS DE TOKENS ENCONTRADOS
TOKEN :
{
        < ERRO_SIMBOLO_INVALIDO : ["\u0000" - "\u00ff"] > // "\u0000" =>  NULL/INVALIDO
    //|   < ERRO_CONSTANTE_INTEIRA : >
}

