options {
//    IGNORE_CASE = true;
    JAVA_UNICODE_ESCAPE = true;
    STATIC = false;
    DEBUG_PARSER = true;
    LOOKAHEAD = 1;
    DEBUG_LOOKAHEAD = true;
}

PARSER_BEGIN(LanguageParser)
package classes;

//import javax.swing.text.html.parser.Parser;
import java.util.List;
import java.util.ArrayList;
import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.lang.StringBuilder;
import java.lang.StringBuilder;
import maquinavirtual.Instruction;
import maquinavirtual.VirtualMachine;
import maquinavirtual.SymbolTable;

public class LanguageParser {
    int contParseError = 0;
    boolean debugRecovery = true;
    final static List<ErrorStruct> output = new ArrayList<ErrorStruct>();
    boolean eof;

    static List<String> listaComandos = new ArrayList<String>();
    static List<String> listaParametros = new ArrayList<String>();
    static LanguageRules regraDasLinguagem = new LanguageRules();
    static VirtualMachine maquina;
    static Instruction instrucoes;

    public static List<Token> getTokens(String stream){
        InputStream target =  new ByteArrayInputStream(stream.getBytes());
        LanguageParser parser = new LanguageParser(target);
        return tokenize(parser);
    }

    public LanguageParser LanguageParser(String code){
        this.checkSyntax(code);
        return this;
    }

    final public void adicionar_regra(String regra, List<String> lista_parametros_dentro_funcao) throws ParseException {
        System.out.println("Iniciando análise semântica...");
        switch(regra){
            case "#1":
                regraDasLinguagem.regra1(lista_parametros_dentro_funcao.get(0));
                for(Instruction instrucao: regraDasLinguagem.getPilha_de_instrucoes()){
                    System.out.println(instrucao.getPonteiro() + " | "
                        + instrucao.getInstrucao()
                        + " | " + instrucao.getEndereco());
                }
                System.out.println("\n\n");
                for(SymbolTable tabelaSimbolo: regraDasLinguagem.getPilha_de_simbolos()){
                    System.out.println(tabelaSimbolo.getIdentificador()
                        + " | " + tabelaSimbolo.getCategoria()
                        + " | " + tabelaSimbolo.getAtributo1()
                        + " | " + tabelaSimbolo.getAtributo2());
                }
                break;
                case "#2":
                    regraDasLinguagem.regra2();
                    break;
                case "#3":
                    regraDasLinguagem.regra3();
                    break;
                case "#4":
                    regraDasLinguagem.regra4(lista_parametros_dentro_funcao.get(0));
                    break;
                case "#5":
                    regraDasLinguagem.regra5();
                    break;
                case "#6":
                    regraDasLinguagem.regra6();
                    break;
                case "#7":
                    regraDasLinguagem.regra7();
                    break;
                case "#8":
                    regraDasLinguagem.regra8();
                    break;
                case "#9":
                    regraDasLinguagem.regra9();
                    break;
                case "#10":
                    regraDasLinguagem.regra10(lista_parametros_dentro_funcao.get(0));
                    break;
                case "#11":
                    regraDasLinguagem.regra11(lista_parametros_dentro_funcao.get(0));
                    break;
                case "#12":
                    regraDasLinguagem.regra12();
                    break;
                case "#13":
                    regraDasLinguagem.regra13(Integer.parseInt(lista_parametros_dentro_funcao.get(0)));
                    break;
                case "#14":
                    regraDasLinguagem.regra14();
                    break;
                case "#15":
                    regraDasLinguagem.regra15();
                    break;
                case "#16":
                    regraDasLinguagem.regra16();
                    break;
                case "#17":
                    regraDasLinguagem.regra17();
                    break;
                case "#18":
                    regraDasLinguagem.regra18(lista_parametros_dentro_funcao.get(0));
                    break;
                case "#19":
                    regraDasLinguagem.regra19();
                    break;
                case "#20":
                    regraDasLinguagem.regra20(Integer.parseInt(lista_parametros_dentro_funcao.get(0)));
                    break;
                case "#21":
                    regraDasLinguagem.regra21(Float.parseFloat(lista_parametros_dentro_funcao.get(0)));
                    break;
                case "#22":
                    regraDasLinguagem.regra22(lista_parametros_dentro_funcao.get(0));
                    break;
                case "#23":
                    regraDasLinguagem.regra23();
                    break;
                case "#24":
                    regraDasLinguagem.regra24();
                    break;
                case "#25":
                    regraDasLinguagem.regra25();
                    break;
                case "#26":
                    regraDasLinguagem.regra26();
                    break;
               case "#27":
                    regraDasLinguagem.regra27();
                    break;
               case "#28":
                    regraDasLinguagem.regra28();
                    break;
               case "#29":
                    regraDasLinguagem.regra29();
                    break;
               case "#30":
                    regraDasLinguagem.regra30();
                    break;
               case "#31":
                    regraDasLinguagem.regra31();
                    break;
               case "#32":
                    regraDasLinguagem.regra32();
                    break;
               case "#33":
                    regraDasLinguagem.regra33();
                    break;
               case "#34":
                    regraDasLinguagem.regra34();
                    break;
               case "#35":
                    regraDasLinguagem.regra35();
                    break;
               case "#36":
                    regraDasLinguagem.regra36();
                    break;
               case "#37":
                    regraDasLinguagem.regra37();
                    break;
               case "#38":
                    regraDasLinguagem.regra38();
                    break;
               case "#39":
                    regraDasLinguagem.regra39();
                    break;
               case "#40":
                    regraDasLinguagem.regra40();
                    break;
               case "#41":
                    regraDasLinguagem.regra41();
                    break;
               case "#42":
                    regraDasLinguagem.regra42();
                    break;
               case "#43":
                    regraDasLinguagem.regra43();
                    break;
               case "#44":
                    regraDasLinguagem.regra44();
                    break;
               case "#45":
                    regraDasLinguagem.regra45();
                    break;
               case "#46":
                    regraDasLinguagem.regra46();
                    break;
               case "#47":
                    regraDasLinguagem.regra47();
                    break;
               case "#48":
                    regraDasLinguagem.regra48();
                    break;
               case "#49":
                    regraDasLinguagem.regra49();
                    break;
               default :
                  break;
        }
    }

    public static ArrayList<ErrorStruct> checkSyntax(String stream) {
        InputStream target =  new ByteArrayInputStream(stream.getBytes());
        LanguageParser parser = new LanguageParser(target);
        try {
            parser.begin_program();
            }
        catch (ParseException e){
            output.add(new ErrorStruct("Error parsing the program.\n", e));
        }
        ArrayList tmp = new ArrayList<ErrorStruct>(output);
        output.clear();
        return tmp;
    }

   public static LanguageParser create(String stream){
        InputStream target =  new ByteArrayInputStream(stream.getBytes());
        LanguageParser parser = new LanguageParser(target);
        return parser;
   }

    public static void main(String args[]) throws TokenMgrError, ParseException {
        LanguageParser parser = null;
        if (args.length == 0) {
            parser = new LanguageParser(System.in);
        }
        else if (args.length == 1) {
            try {
                parser = new LanguageParser(new java.io.FileInputStream(args[0]));
            }
            catch (java.io.FileNotFoundException e) {
                System.out.println("LanguageParser: file " + args[0] + " was not found.");
                return;
            }
        }

        //for (Token token: tokenize(parser)){
        //    String name = LanguageParserConstants.tokenImage[token.kind];
        //    System.out.println("Line " + token.beginLine + " | Column " + token.beginColumn + " | " + token + "\n");
        //}
    }

    public static List<Token> tokenize(LanguageParser parser){
        List<Token> tokens = new ArrayList<Token>();

        Token token = parser.getNextToken();
        while (token.kind != LanguageParserConstants.EOF){
            tokens.add(token);
            token = parser.getNextToken();
        }

        if (!TokenHandler.isClosed()){
            tokens.add(TokenHandler.createToken());
        }

        return tokens;
    }

    static public String im(int x){
        String s = tokenImage[x];
        int k = s.lastIndexOf("\"");
        try {
            s = s.substring(1, k);
        }
        catch (StringIndexOutOfBoundsException e){}
        return s;
    }

    public void consumeUntil(RecoverySet g, ParseException e, String met) throws  ParseException {
        Token tok;
        if (g == null){
            throw e;
        }
        tok = getToken(1); // Current token
        while (!eof){
            /* found a token in set */
            if (g.contains(tok.kind)) {
                break;
            }
            getNextToken();
            tok = getToken(1);
            if (tok.kind == EOF && !g.contains(EOF)){
                eof = true;
            }
        }
        contParseError++;
    }
//    public String analyze(String args[], String textToAnalyze) throws ParseException, ParseEOFException  {
//        StringBuilder sb = new StringBuilder("");
//        Sintatico sintatico = this.readInput(args, textToAnalyze);
//
//        this.handleToken();
//        tokens.append("<EOF>");
//
//        try {
//            if(!hasLexicalErrors){
//                sintatico.program();
//            } else {
//                sb.append(errorListToString("Lexic errors found!", lexicalErrors));
//                return sb.toString();
//            }
//        } catch (ParseException ex) {
//            System.out.println(ex);
//            return ex.getMessage();
//        }
//        if(syntacticErrors.size() > 0){
//            sb.append(errorListToString("Syntax errors found!", syntacticErrors));
//            return sb.toString();
//        }
//        sb.append("Syntax OK!\n");
//        this.semanticErrors = acoesSemanticas.getListaErros();
//        if (semanticErrors.size() > 0) {
//            sb.append(errorListToString("Semantic errors found!", semanticErrors));
//            return sb.toString();
//        }
//        this.instructionList = acoesSemanticas.getInstructionList();
//        sb.append("Semantics OK!\n");
//        return sb.toString();
//    }
//
}
PARSER_END(LanguageParser)

SKIP: {
    " "
    | "\n"
    | "\t"
    | < "//" (~["\n", "\r"])* >
    | < "/*"> {TokenHandler.writeInvalidToOutput(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}: BLOCK_COMMENT_STATE
}

<BLOCK_COMMENT_STATE> SKIP: {
    <"*/"> {TokenHandler.setClosed(true);}: DEFAULT
    | <~[]>
}


/* Keywords */
TOKEN [IGNORE_CASE]: {
        <INTEGER: "integer">
    |   <REAL: "real">
    |   <STRING: "string">
    |   <TRUE: "true">
    |   <UNTRUE: "untrue">
    |   <DO: "do">
    |   <THIS: "this">
    |   <DESCRIPTION: "description">
    |   <BODY: "body">
    |   <IS: "is">
    |   <AS: "as">
    |   <AND: "and">
    |   <CONSTANT: "constant">
    |   <VARIABLE: "variable">
    |   <DESIGNATE: "designate">
    |   <READ: "read">
    |   <WRITE: "write">
    |   <ALL: "all">
    |   <AVALIATE: "avaliate">
    |   <RESULT: "result">
    |   <REPEAT: "repeat">
    |   <DECLARATION: "declaration">
    |   <TYPE: "type">
    |   <ENUM: "enum">
}

/* Operators, relations, etc*/
TOKEN: {
        <PLUS : "+">
    |   <MINUS : "-">
    |   <MULTIPLY : "*">
    |   <DIV : "/">
    |   <POWER : "**">
    |   <WHOLE_DIV : "%">
    |   <REST_DIV: "%%">
    |   <EQUAL_TO: "==">
    |   <ASSIGN: "=">
    |   <DIFF_THAN: "!=">
    |   <LESS_THAN: "<<">
    |   <GREATER_THAN: ">>">
    |   <LESS_THAN_OR_EQ_TO: "<<=">
    |   <GREATER_THAN_OR_EQ_TO: ">>=">
    |   <OPEN_BRACKET: "[">
    |   <CLOSE_BRACKET: "]">
    |   <OPEN_PARENTHESIS: "(">
    |   <CLOSE_PARENTHESIS: ")">
    |   <OPEN_CURLY_BRACKETS: "{">
    |   <CLOSE_CURLY_BRACKETS: "}">
    |   <DOT: ".">
    |   <COMMA: ",">
}

/* Logical Operators */
TOKEN: {
        <LOGICAL_AND : "&" >
    |   <LOGICAL_OR : "|">
    |   <LOGICAL_NOT: "!">
}
TOKEN [IGNORE_CASE]: {
    <LOGIC: "logic">
}

//Tokens Auxiliares
TOKEN : {
        < #LETRA_MINUSCULA: ["a"-"z"] >
    |   < #LETRA_MAIUSCULA: ["A"-"Z"]>
    |   < #LETTER: <LETRA_MAIUSCULA>| <LETRA_MINUSCULA> >
    |   < #ASCII : ~[] >      //any character
    |   < #DIGITS: ["0"-"9"] >
    |   < #UNDERLINE: "_" >

}

/* Identifiers */
TOKEN: {
     <IDENTIFIER: <LETRA_MAIUSCULA> ((<LETTER>)* (<IDENT1>)?
                         | (("_")? (<LETTER>)+ (<IDENT2>)) | ( <DIGITS> (<DIGITS>)? (<IDENT1> | <IDENT2>))) >
|    <#IDENT1: <DIGITS> (<DIGITS>)? ((<LETTER>)* "_" (<LETTER>)* <DIGITS> | (<LETTER>)+ <DIGITS> )*
                                     ((<LETTER>)+ (<DIGITS> (<DIGITS>)?)? ("_")? | (<LETTER>)+ (<DIGITS> (<DIGITS>)?)?)+ >
|    <#IDENT2: "_" ((<LETTER>)* <DIGITS> (<DIGITS>)? (<LETTER>)* "_" | (<DIGITS> (<DIGITS>)?)? (<LETTER>)+ ("_")?)* >
}

/* Numbers  */
TOKEN:  {
        <NUM : (<MINUS>)?(<DIGIT> (<DIGIT>)? (<DIGIT>)?)+>
    |   <#NUMBER_REAL_DECIMAL: <DIGIT> (<DIGIT>)? (<DIGIT>)? >
    |   <NUMBER_REAL: (<MINUS>)? (<NUM> (<DIGIT>)? (<DIGIT>)? "." <NUMBER_REAL_DECIMAL>)>
    |   <#DIGIT : ["0" - "9"]>
}

//Constantes Literais
TOKEN : {

        < STRING_LITERAL : ("\"" (~["\"","\n","\r"])* "\"") | ("'" (~["'","\n","\r"])* "'") >
    // ~["\""] => Qualquer caractere menos a aspa
    // ~["'"] => Qualquer caractere menos o apóstrofro
}

/* Catch all for undefined tokens */
TOKEN : {
        <OTHER: ~[]> |
        <INVALID_IDENTIFIER:
            <LETTER>(<LETTER>|<DIGITS>|(""))*<DIGITS>(<DIGITS>)+(<LETTER>|(""))* |
            <LETTER>(<LETTER>|<DIGITS>|("_"))*(<DIGITS>)+ |
            <LETTER>(<LETTER>|<DIGITS>)((""))+<DIGITS>(<LETTER>|<DIGITS>|("")) |
            (<DIGITS>)+(<LETTER>|<DIGITS>|("_"))* |
            ("")(<LETTER>|<DIGITS>|(""))*
        >
    |   <INVALID_STRING_LITERAL:    "\"" (~ ["\n", "\r", "\""])* | "\'" (~ ["\n", "\r", "\'"])* >
    |   <INVALID_NUM: <DIGIT> <DIGIT> <DIGIT> (<DIGIT>)+ >
    |   <INVALID_NUM_REAL: (<DIGIT> <DIGIT> <DIGIT> <DIGIT> <DIGIT> (<DIGIT>)+ "." <NUMBER_REAL_DECIMAL>)                 // 6 casas inteiras ou +
                                            | (<DIGIT> <DIGIT> <DIGIT> <DIGIT> <DIGIT> (<DIGIT>)+ "." <NUMBER_REAL_DECIMAL> (<DIGIT>)+)     // 6 casas inteiras ou + e com 4 casas decimais ou +
                                            | (<DIGIT> (<DIGIT>)? (<DIGIT>)? (<DIGIT>)? (<DIGIT>)? "." <NUMBER_REAL_DECIMAL> (<DIGIT>)+)     // Até 5 casas inteiras e com + de 3 casas decimais
        >
    |   <INVALID_FACULTATIVE_COMMENT : "description" <INVALID_STRING_LITERAL> >

}

void enum_values(): {} {
    constant_result() | <IDENTIFIER>
}

void inner_enum_declaration(RecoverySet r) : {} {
    try {
        <IDENTIFIER> adicionar_regra("#3") <IS> enum_values() inner_enum_decla_cont() <DOT>
    }
    catch (ParseException e){
           consumeUntil(r, e, "Error: Invalid enum declaration syntax.");
           output.add(new ErrorStruct("Erro: declaracao de enum interna incorreta.\n", e));
        }
}

void inner_enum_decla_cont() : {} {
    adicionar_regra("#4") (<COMMA> enum_values() inner_enum_decla_cont())?
}
void enum_declaration(RecoverySet r) : {} {
    try {
        <TYPE> <OPEN_BRACKET>
            (inner_enum_declaration(r))+
        <CLOSE_BRACKET>
        (<DECLARATION> declaration_constants_and_variables(r))?
    }
    catch (ParseException e){
       consumeUntil(r, e, "Error: Invalid enum declaration syntax.");
       output.add(new ErrorStruct("Erro: declaracao de enum incorreta.\n", e));
    }
}

void identifiers() : {} {
    <IDENTIFIER> adicionar_regra("#24") index() adicionar_regra("#25")
}

void identifiers_list() : {} {
    try {
        identifiers() adicionar_regra("#23") (<COMMA> identifiers())*
       }
      catch (ParseException e){
              output.add(new ErrorStruct("Erro: Lista de identificadores incorreto.\n", e));
          }

}

void type_declaration() : {} {
        <INTEGER> adicionar_regra("#13")
    |   <REAL> adicionar_regra("#14")
    |   <STRING> adicionar_regra("#15")
    |   <LOGIC> adicionar_regra("#16")
    |   <ENUM> adicionar_regra("#17")
}


void variable_declaration() : {} {
    adicionar_regra("#8") identifiers_list() <IS> type_declaration() <DOT>
}

void type_constant() : {} {
        <INTEGER>
    |   <REAL>
    |   <STRING>
    |   <LOGIC>
}

void end_constant() : {} {
    <AS> <CONSTANT> (constant_declaration())+
}

void start_variable() : {} {
    <VARIABLE> (variable_declaration())+ (end_constant())?
}

void constant_declaration() : {} {
    adicionar_regra("#5") identifiers_list() <IS> type_constant()
    adicionar_regra("#6") <ASSIGN> constant_result()
    adicionar_regra("#7") <DOT>
}

void end_variable() : {} {
    <AS> <VARIABLE> (variable_declaration())+
}

void start_constant() : {} {
    <CONSTANT> (constant_declaration())+ (end_variable())?
}

void start_declaration(RecoverySet r) : {} {
    try{
        start_variable() | start_constant()
    }
     catch (ParseException e){
         consumeUntil(r, e, "Error: Invalid declaration body.\n");
         output.add(new ErrorStruct("Erro: Declaracao de variavel/constante errado.\n", e));
     }
}

void inner_declaration(RecoverySet r) : {} {
    try {
        <AS> adicionar_regra("#5") start_declaration(r)
        }
    catch (ParseException e){
        consumeUntil(r, e, "Error: Invalid declaration body.\n");
        output.add(new ErrorStruct("Error: Bad inner declaration of as.\n", e));
    }
}

void declaration_constants_and_variables(RecoverySet r) : {} {
    try{
       <CONSTANT> <AND> <VARIABLE> <OPEN_BRACKET> inner_declaration(r) <CLOSE_BRACKET>
    }
    catch (ParseException e){
        consumeUntil(r, e, "declaration_constants_and_variables");
        output.add(new ErrorStruct("Error: Forma geral de declaracao de constante e variaval incorreta.\n", e));
    }
}

void constant_result() : {} {
    <STRING_LITERAL> | <NUM> | <NUMBER_REAL>
}

void logic_result(RecoverySet r ) : {RecoverySet g = new RecoverySet(CLOSE_BRACKET);} {
    try {
            <TRUE> <RESULT> adicionar_regra("#32") <OPEN_BRACKET> list_of_commands(g) <CLOSE_BRACKET> true_result_cont()
        | <UNTRUE> <RESULT> adicionar_regra("#32") <OPEN_BRACKET> list_of_commands(g) <CLOSE_BRACKET> untrue_result_cont()
    }
   catch (ParseException e){
           consumeUntil(r, e, "");
           output.add(new ErrorStruct("Erro: Verificacao de resultado logico incorreto.\n", e));
       }
}

void true_result_cont() : {RecoverySet g = new RecoverySet(CLOSE_BRACKET);} {
    try {
        (
            <UNTRUE> <RESULT> adicionar_regra("#31") <OPEN_BRACKET> list_of_commands(g) <CLOSE_BRACKET> <DOT>
        )
        |   <DOT>
    }
   catch (ParseException e){
           consumeUntil(g, e, "list_of_commands");
           output.add(new ErrorStruct("Erro: Clausula de teste incorreta.\n", e));
       }

}

void untrue_result_cont() : {RecoverySet g = new RecoverySet(CLOSE_BRACKET);} {
    try {
        (
            <TRUE> <RESULT> adicionar_regra("#30") <OPEN_BRACKET> list_of_commands(g) <CLOSE_BRACKET> <DOT>
        )
        |   <DOT>
    }
    catch (ParseException e){
        consumeUntil(g, e, "");
        output.add(new ErrorStruct("Erro: Clausula de teste incorreta.\n", e));
    }
}

void declarations(RecoverySet r) : {} {
  try {
      (<DECLARATION> (enum_declaration(r) | declaration_constants_and_variables(r)))?
  }
  catch (ParseException e) {
       consumeUntil(r, e, "declarations");
       output.add(new ErrorStruct("Erro de declaracao de enum/variable\n", e));
  }
}

void list_of_commands(RecoverySet r) : {RecoverySet g = First.list_of_commands ;} {
    try {
        (repeat(g) | avaliate(g) | (<WRITE> (write(g) | write_all(g))) | designate(g) | read(g))+
    }
    catch (ParseException e){
        consumeUntil(r, e, "list_of_commands");
        output.add(new ErrorStruct("Erro: Declaracao de comando incorreta.\n", e));
    }
}

void expression(RecoverySet g) : {} {
    try {
        arithmetic_or_logic_expression(g) expression_cont(g)
   }
   catch (ParseException e){
       consumeUntil(g, e, "list_of_commands");
       output.add(new ErrorStruct("Erro: Expressao incorreta.\n", e));
   }
}

void arithmetic_or_logic_expression(RecoverySet g) : {} {
    second_term(g) lesser_priority_operators(g)
}

void expression_cont(RecoverySet g) : {} {
    (
            (<EQUAL_TO> arithmetic_or_logic_expression(g)) adicionar_regra("#36")
        |   (<DIFF_THAN> arithmetic_or_logic_expression(g)) adicionar_regra("#37")
        |   (<LESS_THAN> arithmetic_or_logic_expression(g)) adicionar_regra("#38")
        |   (<GREATER_THAN> arithmetic_or_logic_expression(g)) adicionar_regra("#39")
        |   (<LESS_THAN_OR_EQ_TO> arithmetic_or_logic_expression(g)) adicionar_regra("#40")
        |   (<GREATER_THAN_OR_EQ_TO> arithmetic_or_logic_expression(g)) adicionar_regra("#41")
    )?
}

void first_term(RecoverySet g) : {} {
    element(g) top_priority_operators(g)
}

void second_term(RecoverySet g) : {} {
    first_term(g) medium_priority_operators(g)
}

void element(RecoverySet g) : {} {
        (<IDENTIFIER> index())
    |   <NUM>  adicionar_regra("#26")
    |   <NUMBER_REAL> adicionar_regra("#27")
    |   <STRING_LITERAL> adicionar_regra("#28")
    |   <TRUE> adicionar_regra("#52")
    |   <UNTRUE> adicionar_regra("#53")
    |   (<OPEN_PARENTHESIS> expression(g) <CLOSE_PARENTHESIS>)
    |   (<LOGICAL_NOT> <OPEN_PARENTHESIS> expression(g) <CLOSE_PARENTHESIS> adicionar_regra("#54"))
}

void index() : {} {
    (<OPEN_CURLY_BRACKETS> <NUM> adicionar_regra("#17") <CLOSE_CURLY_BRACKETS>)?
}

void top_priority_operators(RecoverySet g) : {} {
    (<POWER> element(g) adicionar_regra("#50"))*
}

void medium_priority_operators(RecoverySet g) : {} {
    (
            (<MULTIPLY> first_term(g)) adicionar_regra("#45")
        |   (<DIV> first_term(g)) adicionar_regra("#46")
        |   (<WHOLE_DIV> first_term(g)) adicionar_regra("#47")
        |   (<REST_DIV> first_term(g)) adicionar_regra("#48")
        |   (<LOGICAL_AND> first_term(g)) adicionar_regra("#49")
    )*
}

void lesser_priority_operators(RecoverySet g) : {} {
    (
            (<PLUS> second_term(g)) adicionar_regra("#42")
        |   (<MINUS> second_term(g)) adicionar_regra("#43")
        |   (<LOGICAL_OR> second_term(g)) adicionar_regra("#44")
    )*
}

void repeat(RecoverySet r) : {
        RecoverySet g = new RecoverySet(OPEN_BRACKET);
        RecoverySet h = new RecoverySet(CLOSE_BRACKET);
        } {
    try {
        <REPEAT> <THIS>  adicionar_regra("#33") expression(g) adicionar_regra("#34") <OPEN_BRACKET>
            list_of_commands(h)
        <CLOSE_BRACKET> adicionar_regra("#35") <DOT>
    }
    catch (ParseException e){
       consumeUntil(r, e, "");
       output.add(new ErrorStruct("Erro: Declaracao do comando repeat incorreta. \n", e));
    }
}

void avaliate(RecoverySet r) : {RecoverySet g = new RecoverySet(DOT);} {
    try {
    <AVALIATE> <THIS> expression(First.selection_command)
        logic_result(g)
    }
    catch (ParseException e){
           consumeUntil(r, e, "");
           output.add(new ErrorStruct("Erro: Declaracao do comando avaliate incorreta. \n", e));
    }
}

void write(RecoverySet g) : {} {
    try {
        <THIS> <OPEN_BRACKET> write_body() <CLOSE_BRACKET> <DOT>
    }
    catch (ParseException e){
        consumeUntil(g, e, "list_of_commands");
        output.add(new ErrorStruct("Erro: Comando write incorreto.\n", e));
  }
}

void write_all(RecoverySet g) : {} {
    try {
        <ALL> <THIS> <OPEN_BRACKET> write_body() <CLOSE_BRACKET> <DOT>
    }
   catch (ParseException e){
       consumeUntil(g, e, "");
       output.add(new ErrorStruct("Erro: no comando write all.\n", e));
   }

}

void write_body() : {} {
    try {
         (constant_result()  (<COMMA> write_body_cont())* | identifiers()  (<COMMA> write_body_cont())*)
    }
   catch (ParseException e){
       output.add(new ErrorStruct("Erro: Erro no corpo do write.\n", e));
   }

}

void write_body_cont() : {} {
    try {
        constant_result() | identifiers()
    }
    catch (ParseException e){
        output.add(new ErrorStruct("Erro: Erro no corpo do write.\n", e));
    }
}

void designate(RecoverySet r) : {RecoverySet h = new RecoverySet(DOT);} {
    try {
        <DESIGNATE> <THIS> adicionar_regra("#18") identifiers_list() <AS> expression(h) adicionar_regra("#19") <DOT>
    }
   catch (ParseException e){
       consumeUntil(r, e, "");
       output.add(new ErrorStruct("Erro: Erro de atribuicao (designate).\n", e));
   }

}

void read(RecoverySet r) : {} {
    try {
        <READ> <THIS> adicionar_regra("#20") <OPEN_BRACKET> identifiers_list() <CLOSE_BRACKET> <DOT>
    }
    catch (ParseException e){
        consumeUntil(r, e, "read");
    }
}


void header(RecoverySet r) : {} {
    try {
        <DO> <THIS> <IDENTIFIER> adicionar_regra("#1") <OPEN_BRACKET> <CLOSE_BRACKET>
    }
    catch (ParseException e){
        consumeUntil(r, e, "header");
        output.add(new ErrorStruct("Erro: Cabecalho principal incorreto.\n", e));
    }
}

void body(RecoverySet r) : {RecoverySet g = new RecoverySet(OPEN_BRACKET);} {
    try {
            <BODY>  <OPEN_BRACKET>
                list_of_commands(g)
            <CLOSE_BRACKET>
    }
    catch (ParseException e){
        consumeUntil(r, e, "body");
        output.add(new ErrorStruct("Erro: Declaracao do corpo incorreto.\n", e));
    }

}

void desc(RecoverySet r) : {} {
    try {
        (<DESCRIPTION> <STRING_LITERAL>)?
    }
    catch (ParseException e){
        consumeUntil(r, e, "description");
        output.add(new ErrorStruct("Erro: Descricao do programa incorreto\n", e));
    }
}



void main(RecoverySet r) : {
        RecoverySet h = new RecoverySet(BODY);
        RecoverySet g = new RecoverySet(DECLARATION);
        RecoverySet i = g.union(h);
        RecoverySet l = new RecoverySet(DESCRIPTION);
        } {
    try {
            header(i)
            declarations(h)
            body(r.union(l))
            desc(r) adicionar_regra("#2")
    }
    catch (ParseException e){
        consumeUntil(r, e, "main");
    }
}
void adicionar_regra(String regra) : {} {
try {
	adicionar_regra2(regra, null)
    } catch (ParseException e) {
        output.add(new ErrorStruct("", null));
    }
}

void adicionar_regra2(String regra, List<String> lista_parametros) : {} {
try {
	Empty()
    } catch (ParseException e) {
        output.add(new ErrorStruct("", null));
    }
}

void Empty():{}
{
    {}
}
void begin_program() : {RecoverySet r = new RecoverySet(EOF);} {
    try {
        [ main(r) ] <EOF>
    }
    catch (ParseException e){
        consumeUntil(r, e, "begin_program");
        output.add(new ErrorStruct("Erro: Forma geral do programa incorreto.\n", e));
    }
}
