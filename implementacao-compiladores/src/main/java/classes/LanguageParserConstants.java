/* Generated By:JavaCC: Do not edit this line. LanguageParserConstants.java */
package classes;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface LanguageParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INTEGER = 8;
  /** RegularExpression Id. */
  int REAL = 9;
  /** RegularExpression Id. */
  int STRING = 10;
  /** RegularExpression Id. */
  int TRUE = 11;
  /** RegularExpression Id. */
  int UNTRUE = 12;
  /** RegularExpression Id. */
  int DO = 13;
  /** RegularExpression Id. */
  int THIS = 14;
  /** RegularExpression Id. */
  int DESCRIPTION = 15;
  /** RegularExpression Id. */
  int BODY = 16;
  /** RegularExpression Id. */
  int IS = 17;
  /** RegularExpression Id. */
  int AS = 18;
  /** RegularExpression Id. */
  int AND = 19;
  /** RegularExpression Id. */
  int CONSTANT = 20;
  /** RegularExpression Id. */
  int VARIABLE = 21;
  /** RegularExpression Id. */
  int DESIGNATE = 22;
  /** RegularExpression Id. */
  int READ = 23;
  /** RegularExpression Id. */
  int WRITE = 24;
  /** RegularExpression Id. */
  int ALL = 25;
  /** RegularExpression Id. */
  int AVALIATE = 26;
  /** RegularExpression Id. */
  int RESULT = 27;
  /** RegularExpression Id. */
  int REPEAT = 28;
  /** RegularExpression Id. */
  int DECLARATION = 29;
  /** RegularExpression Id. */
  int TYPE = 30;
  /** RegularExpression Id. */
  int ENUM = 31;
  /** RegularExpression Id. */
  int PLUS = 32;
  /** RegularExpression Id. */
  int MINUS = 33;
  /** RegularExpression Id. */
  int MULTIPLY = 34;
  /** RegularExpression Id. */
  int DIV = 35;
  /** RegularExpression Id. */
  int POWER = 36;
  /** RegularExpression Id. */
  int WHOLE_DIV = 37;
  /** RegularExpression Id. */
  int REST_DIV = 38;
  /** RegularExpression Id. */
  int EQUAL_TO = 39;
  /** RegularExpression Id. */
  int ASSIGN = 40;
  /** RegularExpression Id. */
  int DIFF_THAN = 41;
  /** RegularExpression Id. */
  int LESS_THAN = 42;
  /** RegularExpression Id. */
  int GREATER_THAN = 43;
  /** RegularExpression Id. */
  int LESS_THAN_OR_EQ_TO = 44;
  /** RegularExpression Id. */
  int GREATER_THAN_OR_EQ_TO = 45;
  /** RegularExpression Id. */
  int OPEN_BRACKET = 46;
  /** RegularExpression Id. */
  int CLOSE_BRACKET = 47;
  /** RegularExpression Id. */
  int OPEN_PARENTHESIS = 48;
  /** RegularExpression Id. */
  int CLOSE_PARENTHESIS = 49;
  /** RegularExpression Id. */
  int OPEN_CURLY_BRACKETS = 50;
  /** RegularExpression Id. */
  int CLOSE_CURLY_BRACKETS = 51;
  /** RegularExpression Id. */
  int DOT = 52;
  /** RegularExpression Id. */
  int COMMA = 53;
  /** RegularExpression Id. */
  int LOGICAL_AND = 54;
  /** RegularExpression Id. */
  int LOGICAL_OR = 55;
  /** RegularExpression Id. */
  int LOGICAL_NOT = 56;
  /** RegularExpression Id. */
  int LOGIC = 57;
  /** RegularExpression Id. */
  int LETRA_MINUSCULA = 58;
  /** RegularExpression Id. */
  int LETRA_MAIUSCULA = 59;
  /** RegularExpression Id. */
  int LETTER = 60;
  /** RegularExpression Id. */
  int ASCII = 61;
  /** RegularExpression Id. */
  int DIGITS = 62;
  /** RegularExpression Id. */
  int UNDERLINE = 63;
  /** RegularExpression Id. */
  int IDENTIFIER = 64;
  /** RegularExpression Id. */
  int IDENT1 = 65;
  /** RegularExpression Id. */
  int IDENT2 = 66;
  /** RegularExpression Id. */
  int NUM = 67;
  /** RegularExpression Id. */
  int NUMBER_REAL_DECIMAL = 68;
  /** RegularExpression Id. */
  int NUMBER_REAL = 69;
  /** RegularExpression Id. */
  int DIGIT = 70;
  /** RegularExpression Id. */
  int STRING_LITERAL = 71;
  /** RegularExpression Id. */
  int OTHER = 72;
  /** RegularExpression Id. */
  int INVALID_IDENTIFIER = 73;
  /** RegularExpression Id. */
  int INVALID_STRING_LITERAL = 74;
  /** RegularExpression Id. */
  int INVALID_NUM = 75;
  /** RegularExpression Id. */
  int INVALID_NUM_REAL = 76;
  /** RegularExpression Id. */
  int INVALID_FACULTATIVE_COMMENT = 77;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int BLOCK_COMMENT_STATE = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\n\"",
    "\"\\t\"",
    "<token of kind 4>",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 7>",
    "\"integer\"",
    "\"real\"",
    "\"string\"",
    "\"true\"",
    "\"untrue\"",
    "\"do\"",
    "\"this\"",
    "\"description\"",
    "\"body\"",
    "\"is\"",
    "\"as\"",
    "\"and\"",
    "\"constant\"",
    "\"variable\"",
    "\"designate\"",
    "\"read\"",
    "\"write\"",
    "\"all\"",
    "\"avaliate\"",
    "\"result\"",
    "\"repeat\"",
    "\"declaration\"",
    "\"type\"",
    "\"enum\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"**\"",
    "\"%\"",
    "\"%%\"",
    "\"==\"",
    "\"=\"",
    "\"!=\"",
    "\"<<\"",
    "\">>\"",
    "\"<<=\"",
    "\">>=\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\".\"",
    "\",\"",
    "\"&\"",
    "\"|\"",
    "\"!\"",
    "\"logic\"",
    "<LETRA_MINUSCULA>",
    "<LETRA_MAIUSCULA>",
    "<LETTER>",
    "<ASCII>",
    "<DIGITS>",
    "\"_\"",
    "<IDENTIFIER>",
    "<IDENT1>",
    "<IDENT2>",
    "<NUM>",
    "<NUMBER_REAL_DECIMAL>",
    "<NUMBER_REAL>",
    "<DIGIT>",
    "<STRING_LITERAL>",
    "<OTHER>",
    "<INVALID_IDENTIFIER>",
    "<INVALID_STRING_LITERAL>",
    "<INVALID_NUM>",
    "<INVALID_NUM_REAL>",
    "<INVALID_FACULTATIVE_COMMENT>",
  };

}
